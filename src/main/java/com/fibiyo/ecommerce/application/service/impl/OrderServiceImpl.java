package com.fibiyo.ecommerce.application.service.impl;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper; // JSON iÃ§in
import com.fibiyo.ecommerce.application.dto.AddressDto;
import com.fibiyo.ecommerce.application.dto.CartResponse;
import com.fibiyo.ecommerce.application.dto.OrderItemRequest;
import com.fibiyo.ecommerce.application.dto.OrderRequest;
import com.fibiyo.ecommerce.application.dto.OrderResponse;
import com.fibiyo.ecommerce.application.exception.BadRequestException;
import com.fibiyo.ecommerce.application.exception.ForbiddenException;
import com.fibiyo.ecommerce.application.exception.ResourceNotFoundException;
import com.fibiyo.ecommerce.application.mapper.OrderMapper;
import com.fibiyo.ecommerce.application.service.OrderService;
// DiÄŸer servisleri (Coupon, Product) ve Repository'leri inject etmek gerekebilir

import com.fibiyo.ecommerce.application.service.CartService; // Sepet iÅŸlemleri iÃ§in
import com.fibiyo.ecommerce.domain.entity.*; // Order, OrderItem, Product, User, Coupon
import com.fibiyo.ecommerce.domain.enums.OrderStatus;
import com.fibiyo.ecommerce.domain.enums.PaymentStatus; // Enumlar
import com.fibiyo.ecommerce.infrastructure.persistence.repository.*; // Repositoryler
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.domain.Specification;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional; // Kritik: Transactional



import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class OrderServiceImpl implements OrderService {

    private static final Logger logger = LoggerFactory.getLogger(OrderServiceImpl.class);

    // Repositories
    private final OrderRepository orderRepository;
    private final OrderItemRepository orderItemRepository; // Gerekli olmayabilir (cascade ile kaydedilirse)
    private final ProductRepository productRepository;
    private final UserRepository userRepository;
    private final CouponRepository couponRepository; // Kupon iÅŸlemleri iÃ§in
    private final CartRepository cartRepository; // KullanÄ±cÄ±nÄ±n sepetini almak iÃ§in
    private final CartService cartService;

    // Services (Opsiyonel, bazen servisler birbirini Ã§aÄŸÄ±rabilir)
    // private final CouponService couponService;

    // Mappers & Utilities
    private final OrderMapper orderMapper;
    private final ObjectMapper objectMapper; // JSON <-> DTO dÃ¶nÃ¼ÅŸÃ¼mÃ¼ iÃ§in

    // Helper Methods (getCurrentUser etc. ProductService'teki gibi eklenebilir)
     private User getCurrentUser() {
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        if (authentication == null || !authentication.isAuthenticated() || "anonymousUser".equals(authentication.getPrincipal())) {
             throw new ForbiddenException("EriÅŸim iÃ§in kimlik doÄŸrulamasÄ± gerekli.");
        }
        String username = authentication.getName();
        return userRepository.findByUsername(username)
                 .orElseThrow(() -> new ResourceNotFoundException("Current user not found in database: " + username));
     }

     // AddressDto -> JSON String (OrderMapper'daki helper yerine burada olabilir)
      private String convertAddressToJson(AddressDto addressDto) {
          if (addressDto == null) return null;
          try {
             return objectMapper.writeValueAsString(addressDto);
          } catch (JsonProcessingException e) {
             logger.error("Error converting AddressDto to JSON: {}", e.getMessage(), e);
             throw new BadRequestException("Adres bilgisi formatÄ± hatalÄ±."); // Hata fÄ±rlat
          }
      }


    @Autowired
    public OrderServiceImpl(OrderRepository orderRepository, OrderItemRepository orderItemRepository, ProductRepository productRepository, UserRepository userRepository, CouponRepository couponRepository, OrderMapper orderMapper, ObjectMapper objectMapper, CartRepository cartRepository, CartService cartService) {
        this.orderRepository = orderRepository;
        this.orderItemRepository = orderItemRepository;
        this.productRepository = productRepository;
        this.userRepository = userRepository;
        this.couponRepository = couponRepository;
        this.orderMapper = orderMapper;
        this.objectMapper = objectMapper;
        this.cartRepository = cartRepository; // Sepet iÅŸlemleri iÃ§in
        this.cartService = cartService; // Sepet iÅŸlemleri iÃ§in
    }


    // ... (OrderServiceImpl iÃ§inde) ...
@Override
@Transactional
public OrderResponse createOrder(OrderRequest orderRequest) { // Parametre artÄ±k items iÃ§ermiyor
    User customer = getCurrentUser();
    CartResponse cartResponse = cartService.getCartForCurrentUser(); // sepeti al

    Cart cart = cartService.getOrCreateCartForUser(customer);


    // EÄŸer Cart nesnesine (entity) ihtiyacÄ±n varsa, CartService'e yeni metot eklenebilir:
    
    // Alternatif olarak, CartServiceImpl iÃ§inde bu metodu public hale getirip Ã§aÄŸÄ±rabilirsin
    

    if (cart.getItems() == null || cart.getItems().isEmpty()) {
         throw new BadRequestException("SipariÅŸ oluÅŸturmak iÃ§in sepetinizde Ã¼rÃ¼n bulunmalÄ±dÄ±r.");
     }
    logger.info("Creating order for customer ID: {} from cart ID: {}", customer.getId(), cart.getId());

    Order order = new Order();
    order.setCustomer(customer);
    order.setStatus(OrderStatus.PENDING_PAYMENT);
    order.setPaymentStatus(PaymentStatus.PENDING);
    order.setPaymentMethod(orderRequest.getPaymentMethod()); // Request'ten Ã¶deme yÃ¶ntemini al
    order.setShippingAddress(convertAddressToJson(orderRequest.getShippingAddress()));
    order.setBillingAddress(convertAddressToJson(orderRequest.getBillingAddress() != null ? orderRequest.getBillingAddress() : orderRequest.getShippingAddress()));


    BigDecimal totalAmount = BigDecimal.ZERO;

    // === SipariÅŸ kalemlerini SEPETTEN ALarak iÅŸle ===
    for (CartItem cartItem : cart.getItems()) { // Cart entity'sinden item'larÄ± al
         Product product = cartItem.getProduct(); // Cart fetch ile geldiyse product null olmamalÄ±
         int quantity = cartItem.getQuantity();

         // ÃœrÃ¼nÃ¼ tekrar DB'den Ã§ekmek (locking iÃ§in) veya sadece cartItem'daki bilgiyi kullanmak?
         // Stok kontrolÃ¼ iÃ§in en gÃ¼ncel bilgiyi alalÄ±m:
         Product currentProductState = productRepository.findById(product.getId())
                  .orElseThrow(() -> new ResourceNotFoundException("Product (ID: "+ product.getId() +") found in cart but not in DB! Data inconsistency."));


        // Stok ve Aktiflik/Onay KontrolÃ¼
         if (!currentProductState.isActive() || !currentProductState.isApproved()) {
             logger.warn("Attempt to order inactive/unapproved product ID: {} found in cart ID: {}", product.getId(), cart.getId());
             // Bu Ã¼rÃ¼nÃ¼ sipariÅŸe eklemeyip kullanÄ±cÄ±ya bilgi mi versek? Yoksa tÃ¼m sipariÅŸi mi iptal etsek?
             // Åžimdilik hata fÄ±rlatalÄ±m:
             throw new BadRequestException("Sepetinizdeki Ã¼rÃ¼n '" + currentProductState.getName() + "' artÄ±k mevcut deÄŸil.");
        }
         if (currentProductState.getStock() < quantity) {
              logger.warn("Insufficient stock for product ID: {} found in cart ID: {}. Requested: {}, Stock: {}",
                       product.getId(), cart.getId(), quantity, currentProductState.getStock());
              throw new BadRequestException("Sepetinizdeki Ã¼rÃ¼n '" + currentProductState.getName() + "' iÃ§in stok yetersiz. LÃ¼tfen sepetinizi gÃ¼ncelleyin.");
         }

         // OrderItem oluÅŸtur
        OrderItem orderItem = new OrderItem();
         orderItem.setProduct(currentProductState); // GÃ¼ncel product state
         orderItem.setQuantity(quantity);
         orderItem.setPriceAtPurchase(currentProductState.getPrice()); // O anki fiyat
        order.addOrderItem(orderItem); // Order'a ekle ve iliÅŸkiyi kur

         // ÃœrÃ¼n stoÄŸunu azalt
         currentProductState.setStock(currentProductState.getStock() - quantity);
         productRepository.save(currentProductState);

         totalAmount = totalAmount.add(orderItem.getPriceAtPurchase().multiply(BigDecimal.valueOf(quantity)));
     }
     // ==============================================

     order.setTotalAmount(totalAmount);
     order.setDiscountAmount(BigDecimal.ZERO); // BaÅŸlangÄ±Ã§ta sÄ±fÄ±r

      // Kupon KontrolÃ¼ (orderRequest.getCouponCode() kullan)
      Coupon appliedCoupon = null;
      if (orderRequest.getCouponCode() != null && !orderRequest.getCouponCode().isBlank()) {
         // ... (Kupon kontrol ve uygulama mantÄ±ÄŸÄ± Ã¶ncekiyle aynÄ±) ...
         if(appliedCoupon != null){
             order.setCoupon(appliedCoupon);
             // order.setDiscountAmount(hesaplanan_indirim);
             couponRepository.save(appliedCoupon);
         }
      }



// Ã–deme ve toplam tutar hesaplamasÄ±
order.setTotalAmount(totalAmount);
order.setShippingFee(orderRequest.getShippingFee() != null ? orderRequest.getShippingFee() : BigDecimal.ZERO); // eÄŸer dÄ±ÅŸarÄ±dan alÄ±nÄ±yorsa
 order.setDiscountAmount(orderRequest.getDiscountAmount() != null ? orderRequest.getDiscountAmount() : BigDecimal.ZERO); // kupon vs. varsa

// ðŸ”¥ En Ã¶nemlisi burasÄ±:
BigDecimal finalAmount = order.getTotalAmount()
    .add(order.getShippingFee() != null ? order.getShippingFee() : BigDecimal.ZERO)
    .subtract(order.getDiscountAmount() != null ? order.getDiscountAmount() : BigDecimal.ZERO);

order.setFinalAmount(finalAmount);





    Order savedOrder = orderRepository.save(order); // Cascade ile orderItems kaydedilecek

    // !!! SipariÅŸ BAÅžARIYLA oluÅŸturulduktan sonra SEPETÄ° TEMÄ°ZLE !!!
    cartService.clearCart(); // Veya cartRepository.delete(cart) veya cartItemRepository.deleteByCartId(cart.getId())

    logger.info("Order ID: {} created from Cart ID: {}. Cart cleared.", savedOrder.getId(), cart.getId());

    // TODO: Ã–deme iÅŸlemi baÅŸlatma, bildirim vs.

    return orderMapper.toOrderResponse(savedOrder);
}

// ... (DiÄŸer OrderService metodlarÄ±) ...
    
    
    @Override
    @Transactional(readOnly = true)
    public Page<OrderResponse> findMyOrders(Pageable pageable) {
        User customer = getCurrentUser();
         logger.debug("Fetching orders for customer ID: {}", customer.getId());
         Page<Order> orderPage = orderRepository.findByCustomerIdOrderByOrderDateDesc(customer.getId(), pageable);
         return orderPage.map(orderMapper::toOrderResponse); // Page.map() ile dÃ¶nÃ¼ÅŸÃ¼m
    }


    // DiÄŸer OrderService metodlarÄ±nÄ±n implementasyonlarÄ± buraya gelecek...
    @Override
     @Transactional(readOnly = true)
    public OrderResponse findMyOrderById(Long orderId) {
         User customer = getCurrentUser();
          logger.debug("Fetching order ID: {} for customer ID: {}", orderId, customer.getId());
          Order order = orderRepository.findById(orderId)
                  .orElseThrow(() -> new ResourceNotFoundException("Order not found with id: " + orderId));
         // SipariÅŸin bu mÃ¼ÅŸteriye ait olduÄŸunu kontrol et
          if (!order.getCustomer().getId().equals(customer.getId())) {
               throw new ForbiddenException("Bu sipariÅŸi gÃ¶rÃ¼ntÃ¼leme yetkiniz yok.");
          }
          return orderMapper.toOrderResponse(order);
    }

    @Override
    @Transactional
    public OrderResponse cancelMyOrder(Long orderId) {
         User customer = getCurrentUser();
          logger.warn("Customer ID: {} attempting to cancel order ID: {}", customer.getId(), orderId);
          Order order = orderRepository.findById(orderId)
                  .orElseThrow(() -> new ResourceNotFoundException("Order not found with id: " + orderId));

          // Sahiplik kontrolÃ¼
         if (!order.getCustomer().getId().equals(customer.getId())) {
             throw new ForbiddenException("Bu sipariÅŸi iptal etme yetkiniz yok.");
         }

          // SipariÅŸin iptal edilebilir durumda olup olmadÄ±ÄŸÄ±nÄ± kontrol et (Ã–rn: henÃ¼z kargolanmamÄ±ÅŸ olmalÄ±)
          if (order.getStatus() == OrderStatus.SHIPPED || order.getStatus() == OrderStatus.DELIVERED || order.getStatus().name().startsWith("CANCELLED") || order.getStatus().name().startsWith("RETURN")) {
             throw new BadRequestException("Bu sipariÅŸ artÄ±k iptal edilemez. Durum: " + order.getStatus());
         }

        // Durumu gÃ¼ncelle
         order.setStatus(OrderStatus.CANCELLED_BY_CUSTOMER);
         order.setPaymentStatus(PaymentStatus.REFUNDED); // veya PENDING_REFUND?

         // TODO: StoklarÄ± iade et!
         restoreStockForOrderItems(order.getOrderItems());

         // TODO: KullanÄ±lan kupon varsa kullanÄ±m sayÄ±sÄ±nÄ± azalt?
         if(order.getCoupon() != null) {
             // CouponService veya repository Ã¼zerinden decrement
         }

        // TODO: Ã–deme iadesi iÅŸlemini tetikle (PaymentService)
        // paymentService.initiateRefund(orderId);


         Order cancelledOrder = orderRepository.save(order);
         logger.info("Order ID: {} cancelled successfully by customer ID: {}", orderId, customer.getId());
         return orderMapper.toOrderResponse(cancelledOrder);
    }
    // Stok iade metodu
     private void restoreStockForOrderItems(List<OrderItem> items) {
        for(OrderItem item : items) {
             Product product = item.getProduct();
             // ÃœrÃ¼n hala varsa stoÄŸu artÄ±r (Ã¼rÃ¼n silinmiÅŸ olabilir - ON DELETE SET NULL)
             if(product != null) {
                 product.setStock(product.getStock() + item.getQuantity());
                 productRepository.save(product);
                 logger.debug("Restored {} stock for product ID: {}", item.getQuantity(), product.getId());
             } else {
                logger.warn("Could not restore stock for order item ID: {}, product not found (likely deleted).", item.getId());
             }
        }
     }

    // ... (findAllOrders, findSellerOrders, findOrderById, updateOrderStatus etc.)
     @Override
     @Transactional(readOnly = true)
     public Page<OrderResponse> findAllOrders(Pageable pageable, Long customerId, OrderStatus status /*...*/) {
          // Admin rol kontrolÃ¼ yapÄ±lmalÄ±
          logger.debug("Admin finding all orders...");
           Specification<Order> spec = Specification.where(null); // Filtreler iÃ§in spec oluÅŸturulacak
          // if (customerId != null) spec = spec.and(OrderSpecifications.hasCustomer(customerId));
          // if (status != null) spec = spec.and(OrderSpecifications.hasStatus(status));
           Page<Order> orderPage = orderRepository.findAll(spec, pageable);
          return orderPage.map(orderMapper::toOrderResponse);
     }

      @Override
      @Transactional(readOnly = true)
      public Page<OrderResponse> findSellerOrders(Pageable pageable, OrderStatus status) {
         // Seller rol kontrolÃ¼ veya Admin
          User seller = getCurrentUser();
          logger.debug("Seller/Admin finding orders for seller ID: {}", seller.getId());
           // TODO: Specification veya JPQL ile satÄ±cÄ±nÄ±n Ã¼rÃ¼nlerini iÃ§eren sipariÅŸleri filtrele
           Page<Order> orderPage = Page.empty(); // GeÃ§ici
          return orderPage.map(orderMapper::toOrderResponse);
      }

     @Override
     @Transactional(readOnly = true)
     public OrderResponse findOrderById(Long orderId) {
         // Admin/Seller rol kontrolÃ¼
         logger.debug("Finding order by ID (Admin/Seller): {}", orderId);
          Order order = orderRepository.findById(orderId)
                   .orElseThrow(() -> new ResourceNotFoundException("Order not found with id: " + orderId));
          return orderMapper.toOrderResponse(order);
      }

     @Override
     @Transactional
      public OrderResponse updateOrderStatus(Long orderId, OrderStatus newStatus) {
          // Admin/Seller rol kontrolÃ¼
         logger.info("Updating order status for ID: {} to {}", orderId, newStatus);
           Order order = orderRepository.findById(orderId)
                 .orElseThrow(() -> new ResourceNotFoundException("Order not found with id: " + orderId));

          // TODO: GeÃ§erli durum geÃ§iÅŸlerini kontrol et (Ã¶rn: DELIVERED'dan SHIPPED'e dÃ¶nÃ¼lemez)

          order.setStatus(newStatus);

          // Duruma gÃ¶re ek iÅŸlemler (Bildirim gÃ¶nder, Ã¶deme durumu gÃ¼ncelle vb.)
           if(newStatus == OrderStatus.SHIPPED && order.getTrackingNumber() == null) {
               logger.warn("Order ID {} marked as SHIPPED but no tracking number provided.", orderId);
           }
           if(newStatus == OrderStatus.DELIVERED) {
              // Opsiyonel: Otomatik Ã¶deme durumu tamamlama vs.
           }
           if(newStatus.name().startsWith("CANCELLED")) {
               // Stok iadesi (eÄŸer daha Ã¶nce yapÄ±lmadÄ±ysa), refund iÅŸlemleri...
                if(order.getPaymentStatus() != PaymentStatus.REFUNDED){
                   restoreStockForOrderItems(order.getOrderItems());
                   order.setPaymentStatus(PaymentStatus.REFUNDED); // Otomatik refund kabul edelim ÅŸimdilik
               }
           }


           Order updatedOrder = orderRepository.save(order);
          logger.info("Order ID: {} status updated to {}", orderId, newStatus);
          // TODO: MÃ¼ÅŸteriye bildirim gÃ¶nder
          return orderMapper.toOrderResponse(updatedOrder);

           




      }

       @Override
       @Transactional
       public OrderResponse addTrackingNumber(Long orderId, String trackingNumber) {
          // Admin/Seller rol kontrolÃ¼
          logger.info("Adding tracking number '{}' to order ID: {}", trackingNumber, orderId);
           Order order = orderRepository.findById(orderId)
                  .orElseThrow(() -> new ResourceNotFoundException("Order not found with id: " + orderId));

          // SipariÅŸ kargolanmÄ±ÅŸ veya iÅŸleniyor olmalÄ±
           if (order.getStatus() != OrderStatus.PROCESSING && order.getStatus() != OrderStatus.SHIPPED) {
               throw new BadRequestException("Takip numarasÄ± eklemek iÃ§in sipariÅŸ durumu uygun deÄŸil: " + order.getStatus());
          }

          order.setTrackingNumber(trackingNumber);
           // Takip numarasÄ± eklendiyse durumu SHIPPED yapabiliriz (opsiyonel)
           if(order.getStatus() == OrderStatus.PROCESSING){
               order.setStatus(OrderStatus.SHIPPED);
           }

           Order updatedOrder = orderRepository.save(order);
          logger.info("Tracking number added for order ID: {}", orderId);
           // TODO: MÃ¼ÅŸteriye bildirim gÃ¶nder

           
          return orderMapper.toOrderResponse(updatedOrder);
       }

}